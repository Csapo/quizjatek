using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Collections;
using System.Diagnostics;

namespace quizjatek
{
    struct Anime
    {
        public string AnimeName;
        public int Episodes;
    }


    internal class Program
    {
        static int win = 0;

        public static List<Anime> AnimeList = new List<Anime>();

        static string Finish(int win)
        {
            if (win ==10)
            {
               return "LET'S GOOOO";
            }
            else if (win >= 8)
            {
                return "Mehet nem vagy rossz";
            }
            else if (win >= 5)
            {
                return "Csak ennyit tudsz?";
            }
            else
            {
                return "Szar vagy";
            }

        }
        static void inread(string path)
        {

            StreamReader sr = new StreamReader(path);






            while (!sr.EndOfStream)
            {
                Anime temp = new Anime();
                string[] data = sr.ReadLine().Split('\t');
                temp.AnimeName = data[0];
                temp.Episodes = Convert.ToInt32(data[1]);

                AnimeList.Add(temp);
            }

            sr.Close();

        }

        static List<int> lilrandom()
        {
            Random rnd = new Random();
            List<int> fakeanswers = new List<int>();
            for (int i = 0; i < 3; i++)
            {
                int fake = rnd.Next(5, 21);
                fakeanswers.Add(fake);
            }
            List<int> real = new List<int>();
            for (int i = 0; i < AnimeList.Count; i++)
            {
                if (AnimeList[i].Episodes < 21)
                {
                    real.Add(AnimeList[i].Episodes);
                }

            }
           int count = 0;
            while (real[count] == fakeanswers[count])
            {
                int fake = rnd.Next(5, 21);
                fakeanswers[count] = fake;
                count++;
            }

            return fakeanswers;
        }

        static List<int> midrandom()
        {
            Random rnd = new Random();
            List<int> fakeanswers = new List<int>();
            for (int i = 0; i < 3; i++)
            {
                int fake = rnd.Next(21, 41);
                fakeanswers.Add(fake);
            }
            List<int> real = new List<int>();
            for (int i = 0; i < AnimeList.Count; i++)
            {
                if (AnimeList[i].Episodes > 21 && AnimeList[i].Episodes < 41)
                {
                    real.Add(AnimeList[i].Episodes);
                }

            }
            for(int i = 0; i < fakeanswers.Count; i++)
            {
                if (fakeanswers[i] == fakeanswers[0] || fakeanswers[i] == fakeanswers[1] || fakeanswers[i] == fakeanswers[2])
                {
                    int fake = rnd.Next(21, 41);
                    fakeanswers[i] = fake;
                }
            }
            int count = 0;
            while (real[count] == fakeanswers[count])
            {
                int fake = rnd.Next(21, 41);
                fakeanswers[count] = fake;
                count++;
            }
            return fakeanswers;
        }
        static List<int> mid2random()
        {
            Random rnd = new Random();
            List<int> fakeanswers = new List<int>();
            for (int i = 0; i < 3; i++)
            {
                int fake = rnd.Next(41, 61);
                fakeanswers.Add(fake);
            }
            List<int> real = new List<int>();
            for (int i = 0; i < AnimeList.Count; i++)
            {
                if (AnimeList[i].Episodes > 41 && AnimeList[i].Episodes < 61)
                {
                    real.Add(AnimeList[i].Episodes);
                }

            }
            int count = 0;
            while (real[count] == fakeanswers[count])
            {
                int fake = rnd.Next(41, 61);
                fakeanswers[count] = fake;
                count++;
            }

            return fakeanswers;
        }
        static List<int> bigrandom()
        {
            Random rnd = new Random();
            List<int> fakeanswers = new List<int>();
            for (int i = 0; i < 3; i++)
            {
                int fake = rnd.Next(75, 200);
                fakeanswers.Add(fake);
            }
            List<int> real = new List<int>();
            for (int i = 0; i < AnimeList.Count; i++)
            {
                if (AnimeList[i].Episodes > 75 && AnimeList[i].Episodes < 201)
                {
                    real.Add(AnimeList[i].Episodes);
                }

            }
            int count = 0;
            while (real[count] == fakeanswers[count])
            {
                int fake = rnd.Next(75, 200);
                fakeanswers[count] = fake;
                count++;
            }

            return fakeanswers;
        }
        static List<int> big2random()
        {
            Random rnd = new Random();
            List<int> fakeanswers = new List<int>();
            for (int i = 0; i < 3; i++)
            {
                int fake = rnd.Next(201, 501);
                fakeanswers.Add(fake);
            }
            List<int> real = new List<int>();
            for (int i = 0; i < AnimeList.Count; i++)
            {
                if (AnimeList[i].Episodes > 201 && AnimeList[i].Episodes < 501)
                {
                    real.Add(AnimeList[i].Episodes);
                }

            }
            int count = 0;
            while (real[count] == fakeanswers[count])
            {
                int fake = rnd.Next(201, 501);
                fakeanswers[count] = fake;
                count++;
            }

            return fakeanswers;
        }
        static List<int> OnePiecerandom()
        {
            Random rnd = new Random();
            List<int> fakeanswers = new List<int>();
            for (int i = 0; i < 3; i++)
            {
                int fake = rnd.Next(950, 1101);
                fakeanswers.Add(fake);
            }
            List<int> real = new List<int>();
            for (int i = 0; i < AnimeList.Count; i++)
            {
                if (AnimeList[i].Episodes > 950 && AnimeList[i].Episodes < 1101)
                {
                    real.Add(AnimeList[i].Episodes);
                }

            }
            int count = 0;
            while (real[count] == fakeanswers[count])
            {
                int fake = rnd.Next(950, 1101);
                fakeanswers[count] = fake;
                count++;
            }

            return fakeanswers;
        }



        public static string Win()
        {



                Random rnd = new Random();
                int place = rnd.Next(0, 61);
                int episode = AnimeList[place].Episodes;



                if (AnimeList[place].Episodes > 950 && AnimeList[place].Episodes <= 1100)
                {

                    Console.WriteLine(AnimeList[place].AnimeName);

                    Console.WriteLine($"A) {OnePiecerandom()[0]}");
                    Console.WriteLine($"B) {OnePiecerandom()[1]}");
                    Console.WriteLine($"C) {AnimeList[place].Episodes}");
                    Console.WriteLine($"D) {OnePiecerandom()[2]}");


                    int result;
                    Console.Write("Válasz(a számot): ");
                    result = int.Parse(Console.ReadLine());

                    if (result == AnimeList[place].Episodes)
                    {
                        win++;
                        return "Jó válasz";
                    }
                    else
                    {
                        return "Nem jó";
                    }


                }
                else if (AnimeList[place].Episodes > 201 && AnimeList[place].Episodes <= 501)
                {
                    Console.WriteLine(AnimeList[place].AnimeName);

                    Console.WriteLine($"A) {episode}");
                    Console.WriteLine($"B) {big2random()[0]}");
                    Console.WriteLine($"C) {big2random()[2]}");
                    Console.WriteLine($"D) {big2random()[1]}");


                    int result;
                    Console.Write("Válasz(a számot): ");
                    result = int.Parse(Console.ReadLine());

                    if (result == AnimeList[place].Episodes)
                    {
                        win++;
                        return "Jó válasz";
                        
                    }
                    else
                    {
                        return "Nem jó";
                    }


                }
                else if (AnimeList[place].Episodes > 74 && AnimeList[place].Episodes <= 200)
                {
                    Console.WriteLine(AnimeList[place].AnimeName);

                    Console.WriteLine($"A) {bigrandom()[2]}");
                    Console.WriteLine($"B) {episode}");
                    Console.WriteLine($"C) {bigrandom()[0]}");
                    Console.WriteLine($"D) {bigrandom()[1]}");


                    int result;
                    Console.Write("Válasz(a számot): ");
                    result = int.Parse(Console.ReadLine());

                    if (result == AnimeList[place].Episodes)
                    {
                        win++;
                        return "Jó válasz";
                        
                    }
                    else
                    {
                        return "Nem jó";
                    }


                }
                else if (AnimeList[place].Episodes > 41 && AnimeList[place].Episodes <= 60)
                {
                    Console.WriteLine(AnimeList[place].AnimeName);

                    Console.WriteLine($"A) {mid2random()[0]}");
                    Console.WriteLine($"B) {mid2random()[2]}");
                    Console.WriteLine($"C) {mid2random()[1]}");
                    Console.WriteLine($"D) {episode}");


                    
                    Console.Write("Válasz(a számot): ");
                    int result = Convert.ToInt32(Console.ReadLine());

                    if (result == AnimeList[place].Episodes)
                    {
                        win++;
                        return "Jó válasz";

                    }
                    else
                    {
                        return "Nem jó";
                    }


                }
                else if (AnimeList[place].Episodes > 21 && AnimeList[place].Episodes <= 40)
                {
                    Console.WriteLine(AnimeList[place].AnimeName);


                    Console.WriteLine($"A) {episode}");
                    Console.WriteLine($"B) {midrandom()[2]}");
                    Console.WriteLine($"C) {midrandom()[1]}");
                    Console.WriteLine($"D) {midrandom()[0]}");


                    
                    Console.Write("Válasz(a számot): ");
                    int result = Convert.ToInt32(Console.ReadLine());

                    if (result == AnimeList[place].Episodes)
                    {
                        win++;
                        return "Jó válasz";

                    }
                    else
                    {
                        return "Nem jó";
                    }


                }
                else
                {
                    Console.WriteLine(AnimeList[place].AnimeName);

                    Console.WriteLine($"A) {lilrandom()[1]}");
                    Console.WriteLine($"B) {lilrandom()[2]}");
                    Console.WriteLine($"C) {episode}");
                    Console.WriteLine($"D) {lilrandom()[0]}");


                    int result;
                    Console.Write("Válasz(a számot): ");
                    result = int.Parse(Console.ReadLine());

                    if (result == AnimeList[place].Episodes)
                    {

                        win++;
                        return "Jó válasz";

                    }
                    else
                    {
                        return "Nem jó";
                    }
                }



        }
        static void Main(string[] args)
        {



            inread("kerdesek.txt");

            Console.WriteLine("Hány epizódos az Anime?");

            Win();



            Finish(win);



            Console.ReadKey();









        }
    }
}

